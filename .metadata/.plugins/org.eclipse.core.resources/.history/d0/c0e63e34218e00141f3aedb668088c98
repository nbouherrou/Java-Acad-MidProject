package org.jacademie.projet1.utils;

import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;

import org.apache.commons.io.FilenameUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.jacademie.projet1.constants.Constants;

public class FileUtils {

	private static Logger logger = LogManager.getLogger(FileUtils.class);
	
	

	public ArrayList<Path> findFileInRepoWithGoodExtension(String path,String extension) {
		
		logger.info("In findFileInRepoWithGoodExtension ....");
		ArrayList<Path> pathList = new ArrayList<Path>();

		try {
			Files.walk(Paths.get(path)).forEach(
					filePath -> {
						
						if (Files.isRegularFile(filePath)) {
							
							String ext = FilenameUtils.getExtension(filePath
									.toString());
							if (ext.equals(extension)) {

								pathList.add(filePath);

								logger.info("File found : "
										+ filePath.toString());
							}
						}
					});

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if (pathList.isEmpty()) {
			logger.info("No file found with extension" + extension);
		}
		
		logger.info("Bye findFileInRepoWithGoodExtension \n");
		return pathList;
	}
	

	public ArrayList<Path> isGoodFile(ArrayList<Path> pathList){
		
		final ArrayList<Path> paths = pathList;
		
		for (Path path : paths) {
			
			try {
				
				Files.lines(path,Charset.defaultCharset()).forEachOrdered(line -> {
						
					String[] s = line.split(",");
					
					if (s.length != 7) {
						
						paths.remove(path);
					}
					
					});
				
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			
		}
			

	
		
		return paths;
		
	}
	
	
	public static void main(String[] args) {
		FileUtils fileUtils = new FileUtils();
		
		ArrayList<Path> pathList = new ArrayList<Path>();
		
		ArrayList<Path> goodPath = new ArrayList<Path>();
		

		pathList = fileUtils.findFileInRepoWithGoodExtension(
				Constants.pathSource, Constants.extension);
		
		goodPath = fileUtils.isGoodFile(pathList);
		
		System.out.println(goodPath);
	}
	
}
